<?xml version="1.0"?>

<!--TODO replace /home/fred/logs/log1 -->

<hackerbot xmlns="http://www.github/cliffe/SecGen/hackerbotz"
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://www.github/cliffe/SecGen/hackerbot">

	<name>Hackerbot</name>

	<AIML_chatbot_rules>config/AIML</AIML_chatbot_rules>

	<!--Method for gaining shell access, can be overwritten per-attack-->
	<!--ssh -oStrictHostKeyChecking=no control@localhost -->
	<!--<get_shell>bash</get_shell>-->
	<get_shell>sshpass -p randompassword ssh -oStrictHostKeyChecking=no root@{{chat_ip_address}} /bin/bash</get_shell>

	<messages>
		<greeting>The blackhat hacking group Empir3 are about to hack your system. I'll do what I can hold them off, but you are going to have to work with me to protect yourself. I'll cough up some flags if you work with me.</greeting>

		<!--Must provide alternatives for each message-->
		<say_ready>Let me know when you are 'ready', if you want to move on to another attack, say 'next', or 'previous' and I'll move things along</say_ready>
		<say_ready>When you are ready, simply say 'ready'.</say_ready>
		<say_ready>'Ready'?</say_ready>
		<say_ready>Better hurry, the attack is imminent... Let me know when you're 'ready'.</say_ready>
		<next>Ok, I'll do what I can to move things along...</next>
		<next>Moving things along to the next attack...</next>
		<next>Ok, next attack...</next>
		<previous>Ok, I'll do what I can to back things up...</previous>
		<previous>Ok, previous attack...</previous>
		<previous>Ok, backing up.</previous>
		<goto>Ok, skiping it along.</goto>
		<goto>Let me see what I can do to goto that attack.</goto>
		<last_attack>That was the last attack for now. You can rest easy, until next time... (End.)</last_attack>
		<last_attack>That was the last attack. Game over?</last_attack>
		<first_attack>You are back to the beginning!</first_attack>
		<first_attack>This is where it all began.</first_attack>
		<getting_shell>Ok. Gaining shell access, and running post command...</getting_shell>
		<getting_shell>Hacking in progress...</getting_shell>
		<getting_shell>Attack underway...</getting_shell>
		<getting_shell>Here we go...</getting_shell>
		<got_shell>We are in to your system.</got_shell>
		<got_shell>You are pwned.</got_shell>
		<got_shell>We have shell.</got_shell>
		<repeat>Let me know when you are 'ready', if you want to move on to another attack, say 'next', or 'previous' and I'll move things along</repeat>
		<repeat>Say 'ready', 'next', or 'previous'.</repeat>

		<!--Single responses:-->
		<help>I am waiting for you to say 'ready', 'next', 'previous', 'list', 'goto *X*', or 'answer *X*'</help>
		<say_answer>Say "The answer is *X*".</say_answer>
		<no_quiz>There is no question to answer</no_quiz>
		<correct_answer>Correct</correct_answer>
		<incorrect_answer>Incorrect</incorrect_answer>
		<invalid>That's not possible.</invalid>
		<non_answer>Wouldn't you like to know.</non_answer>

		<!--can be overwritten per-attack-->
		<shell_fail_message>Oh no. Failed to get shell... You need to let us in.</shell_fail_message>
	</messages>

	<attack>
		<prompt>An attempt to delete /home/fred/trade_secrets/credit_card is coming. Stop the attack using access controls.</prompt>

		<post_command>rm --interactive=never /home/fred/trade_secrets/credit_card; echo $?</post_command>
		<condition>
			<output_matches>Permission denied|Operation not permitted</output_matches>
			<message>:) Well done! flag{yay1!}</message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<condition>
			<output_equals>0</output_equals>
			<message>:( We managed to delete your file! You need to use access controls to protect the file.</message>
		</condition>
		<condition>
			<output_matches>No such file or directory</output_matches>
			<message>:( The file should exist!</message>
		</condition>
		<else_condition>
			<message>:( Something was not right...</message>
		</else_condition>

	</attack>

	<attack>
		<prompt>An attempt to delete /home/fred/trade_secrets/code.pl is coming. Stop the attack using access controls.</prompt>

		<post_command>rm --interactive=never /home/fred/trade_secrets/code.pl; echo $?</post_command>
		<condition>
			<output_matches>Permission denied</output_matches>
			<message>:) Well done! flag{yay1!}</message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<condition>
			<output_equals>0</output_equals>
			<message>:( We managed to delete your file! You need to use access controls to protect the file. Create a new file.</message>
		</condition>
		<condition>
			<output_matches>No such file or directory</output_matches>
			<message>:( The file should exist!</message>
		</condition>
		<else_condition>
			<message>:( Something was not right...</message>
		</else_condition>

	</attack>

	<attack>
		<!--<topic>Protecting integrity with file attributes</topic>-->
		<prompt>An attempt to delete /home/fred/logs/log1 is coming. Stop the attack using file attributes.</prompt>

		<post_command>rm --interactive=never /home/fred/logs/log1; echo $?</post_command>
		<condition>
			<output_matches>Operation not permitted</output_matches>
			<message>:) Well done! flag{yay1!}</message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<condition> <!-- TODO: chmod to defeat the defense -->
			<output_matches>Permission denied</output_matches>
			<message>:( You did protect the file, but not using file attributes.</message>
		</condition>
		<condition>
			<output_equals>0</output_equals>
			<message>:( We managed to delete your file! You need to use file attributes to protect the file.  Create a new file.</message>
		</condition>
		<condition>
			<output_matches>No such file or directory</output_matches>
			<message>:( The file should exist!</message>
		</condition>
		<else_condition>
			<message>:( Something was not right...</message>
		</else_condition>
	</attack>
	<attack>
		<!--<topic>Protecting integrity with file attributes</topic>-->
		<prompt>An attempt to overwrite /home/fred/logs/log1 is coming. Stop the attack by making the file append only.</prompt>

		<post_command>echo 'your logs are gone!' > /home/fred/logs/log1; echo 'damn!' >> /tmp/test/log1; tail /tmp/test/log1</post_command>
		<condition>
			<output_not_matches>damn!</output_not_matches>
			<message>:( You stopped anything from being appended to the file. What kind of log file do you think this is?</message>
		</condition>
		<condition>
			<output_matches>Operation not permitted</output_matches>
			<message>:) Well done! flag{yay1!}</message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<condition>
			<output_matches>No such file or directory</output_matches>
			<message>:( The file should exist!</message>
		</condition>
		<else_condition>
			<message>:( Something was not right...</message>
		</else_condition>
	</attack>

	<attack>
		<!--<topic>Protecting integrity with read-only filesystems</topic>-->
		<prompt>An attempt to edit a file in /etc is coming. Stop the attack by bind mounting /etc/ as read-only.</prompt>

		<post_command>touch /etc/you_were_hacked; adduser yourehacked</post_command>
		<condition>
			<output_matches>Read-only file system</output_matches>
			<message>:) Well done! flag{yay1!}</message>
			<trigger_next_attack />
		</condition>
		<condition>
			<output_matches>Permission denied|Operation not permitted</output_matches>
			<message>:( You stopped the attack, but not by using read only bind mounting...</message>
		</condition>
		<else_condition>
			<message>:( Something was not right...</message>
		</else_condition>
	</attack>

	<attack>
		<!--<topic>Detecting changes to resources using backups</topic>-->
		<prompt>An attempt to add a new user is coming, let it happen. But first create a backup of /etc/passwd.</prompt>

		<post_command>sudo adduser hackerbot --gecos 'flag{yay!}' --disabled-password --quiet; echo $?</post_command>
		<condition>
			<output_matches>0</output_matches>
			<message>User added</message>
			<!--<trigger_next_attack>true</trigger_next_attack>-->
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>already exists</output_matches>
			<message>:( Remove the user and try again.</message>
		</condition>
		<condition>
			<output_matches>Permission denied|Operation not permitted|Read-only</output_matches>
			<message>:( You stopped the attack, rather than monitor for changes...</message>
		</condition>
		<else_condition>
			<message>:( Something was not right...</message>
		</else_condition>

		<quiz>
			<question>Now after the attack, find the username added by diffing using a backup. What username was created?</question>
			<answer>^hackerbot$</answer>
			<correct_answer_response>:) flag{yay!}</correct_answer_response>
			<trigger_next_attack />
		</quiz>
	</attack>

	<attack>
		<!--<topic>Detecting changes to resources using backups</topic>-->
		<prompt>An attempt to edit a config file is coming, let it happen. But first create a backup of the /etc/ directory to /tmp/etc-backup/.</prompt>

		<post_command>echo '# flag{yay!}' >> `find /etc/ -name '*.sh' | sort -R | head -n 1`; echo $?</post_command>
		<condition>
			<output_matches>0</output_matches>
			<message>A flag has been inserted into a random file... Use your backups to compare to the original to find the flag. Get to work!</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>Permission denied|Operation not permitted|Read-only</output_matches>
			<message>:( You stopped the attack, rather than monitor for changes...</message>
		</condition>
		<else_condition>
			<message>:( Something was not right...</message>
		</else_condition>

		<quiz>
			<question>Find the flag, what file was the flag stored in?</question>
			<answer>^/etc/.*sh$</answer>
			<correct_answer_response>:) flag{yay!}</correct_answer_response>
			<trigger_next_attack />
		</quiz>

	</attack>

	<attack>
		<!--<topic>Detecting changes to resources using backups</topic>-->
		<prompt>An attempt to edit a config file is coming, let it happen.</prompt>

		<post_command>echo '# flag{yay!}' >> `find /tmp/etc-backup/ -name '*.sh' | sort -R | head -n 1`; echo $?</post_command>
		<condition>
			<output_matches>0</output_matches>
			<message>A flag has been inserted into a random file IN YOUR BACKUPS! (Did you really think that was a safe place to store them?) Find the flag. Get to work!</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>Permission denied|Operation not permitted|Read-only</output_matches>
			<message>:( You stopped the attack, rather than monitor for changes... We are trying to write to /tmp/etc-backup/</message>
		</condition>
		<else_condition>
			<message>:( Something was not right... We are trying to write to /tmp/etc-backup/</message>
		</else_condition>

		<quiz>
			<question>Find the flag, what file was the flag stored in?</question>
			<answer>^/etc-backup/.*sh$</answer>
			<correct_answer_response>:) flag{yay!}</correct_answer_response>
			<trigger_next_attack />
		</quiz>
	</attack>

	<attack>
		<!--<topic>File integrity checkers</topic>-->
		<prompt>Creating a new file in /home/fred/trade_secrets/...</prompt>

		<post_command>echo 'somethingrandom' > /home/fred/trade_secrets/something_secret; echo $?</post_command>
		<condition>
			<output_matches>0</output_matches>
			<message>Created /home/fred/trade_secrets/something_secret</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>Permission denied|Operation not permitted|Read-only</output_matches>
			<message>:( You stopped the attack, rather than monitor for changes... We need to be able to write to /secrets/something_secret/</message>
		</condition>
		<else_condition>
			<message>:( Something was not right... We are trying to write to /secrets/something_secret</message>
		</else_condition>

		<quiz>
			<question>What is the SHA1 hash of /home/fred/trade_secrets/something_secret?</question>
			<answer>^c9eb312ea2daf4688838ed8c75b9b7e0329e33bd$</answer>
			<correct_answer_response>:) flag{yay!}</correct_answer_response>
			<trigger_next_attack />
		</quiz>
	</attack>

	<!--TODO test this-->
	<attack>
		<!--<topic>File integrity checkers</topic>-->
		<prompt>Going to edit one of your files in /etc/, use hash comparisons to detect which file changes</prompt>
		<post_command>x=`find /etc/ -name '*.sh' | sort -R | head -n 1`; echo '' >> $x; echo $x</post_command>
		<suppress_command_output_feedback />

		<condition>
			<output_matches>/etc.*</output_matches>
			<message>Good. Now answer this...</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>Permission denied|Operation not permitted|Read-only</output_matches>
			<message>:( You stopped the attack, rather than monitor for changes... We need to be able to write to /secrets/something_secret/</message>
		</condition>
		<else_condition>
			<message>:( Something was not right... We are trying to write to /secrets/something_secret</message>
		</else_condition>

		<quiz>
			<question>What is the file that changed?</question>
			<answer>{{post_command_output}}</answer>
			<correct_answer_response>:) flag{yay!}</correct_answer_response>
			<trigger_next_attack />
		</quiz>
	</attack>

	<!--TODO test this-->
	<attack>
		<!--<topic>File integrity checkers</topic>-->
		<prompt>Going to create a new file in /etc/, use hash comparisons to detect which new file changes (hint: sha1deep, hashdeep, or shasum)</prompt>
		<post_command>x=`find /etc/ -type d' | sort -R | head -n 1`; mktemp -p $x -t "XXXXXXXX"</post_command>
		<suppress_command_output_feedback />

		<condition>
			<output_matches>/etc.*</output_matches>
			<message>Good. Now answer this...</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>Permission denied|Operation not permitted|Read-only</output_matches>
			<message>:( You stopped the attack, rather than monitor for changes... We need to be able to write to /secrets/something_secret/</message>
		</condition>
		<else_condition>
			<message>:( Something was not right... We are trying to write to /secrets/something_secret</message>
		</else_condition>

		<quiz>
			<question>What is the file that was created?</question>
			<answer>{{post_command_output}}</answer>
			<correct_answer_response>:) flag{yay!}</correct_answer_response>
			<trigger_next_attack />
		</quiz>
	</attack>

	<!--TODO test this-->
	<!--TODO could further randomise outcomes, actually copies rather than creating a new binary-->
	<attack>
		<!--<topic>File integrity checkers</topic>-->
		<prompt>Going to copy a new random binary in /bin/|/usr/bin/ use hash comparisons to find the filename (hint: sha1deep, hashdeep, or shasum)</prompt>
		<post_command>srcf=`find /bin/ /usr/bin/ -executable | sort -R | head -n 1`; dest=$srcf.$RANDOM; cp $srcf $dest; echo $dest</post_command>
		<suppress_command_output_feedback />

		<condition>
			<output_matches>/etc.*</output_matches>
			<message>Good. Now answer this...</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>Permission denied|Operation not permitted|Read-only</output_matches>
			<message>:( You stopped the attack, rather than monitor for changes... We need to be able to write to /secrets/something_secret/</message>
		</condition>
		<else_condition>
			<message>:( Something was not right... We are trying to write to /secrets/something_secret</message>
		</else_condition>

		<quiz>
			<question>What is the file that was created?</question>
			<answer>{{post_command_output}}</answer>
			<correct_answer_response>:) flag{yay!}</correct_answer_response>
			<trigger_next_attack />
		</quiz>
	</attack>

	<!--TODO test this-->
	<!--TODO could further randomise outcomes, actually copies rather than creating a new binary-->
	<attack>
		<!--<topic>File integrity checkers</topic>-->
		<prompt>Going to move random binaries in /bin/|/usr/bin/ use hash comparisons to find the filename (hint: sha1deep, hashdeep, or shasum)</prompt>
		<post_command>mv1=`find /bin/ /usr/bin/ -executable | sort -R | head -n 1`; mv2=`find /bin/ /usr/bin/ -executable | sort -R | head -n 1`; cp $mv1 $mv1.tmp; cp $mv2 $mv1; cp $mv1.tmp $mv2; echo $mv1 $mv2</post_command>
		<suppress_command_output_feedback />

		<condition>
			<output_matches>/etc.*</output_matches>
			<message>Good. Now answer this...</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>Permission denied|Operation not permitted|Read-only</output_matches>
			<message>:( You stopped the attack, rather than monitor for changes... We need to be able to write to /secrets/something_secret/</message>
		</condition>
		<else_condition>
			<message>:( Something was not right... We are trying to write to /secrets/something_secret</message>
		</else_condition>

		<quiz>
			<question>What is the file that was created?</question>
			<answer>{{post_command_output}}</answer>
			<correct_answer_response>:) flag{yay!}</correct_answer_response>
			<trigger_next_attack />
		</quiz>
	</attack>

	<!--copied a new random file in /etc/ use hash comparisons to find the filename (hint: sha1deep, hashdeep, or shasum) -->
	<!--TODO test this-->
	<attack>
		<!--<topic>File integrity checkers</topic>-->
		<prompt>Going to copy a new random file in /etc/ use hash comparisons to find the filename (hint: sha1deep, hashdeep, or shasum)</prompt>
		<post_command>srcf=`find /etc/ -type f | sort -R | head -n 1`; cp $srcf $srcf.$RANDOM</post_command>
		<suppress_command_output_feedback />

		<condition>
			<output_matches>/etc.*</output_matches>
			<message>Good. Now answer this...</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>Permission denied|Operation not permitted|Read-only</output_matches>
			<message>:( You stopped the attack, rather than monitor for changes... We need to be able to write to /secrets/something_secret/</message>
		</condition>
		<else_condition>
			<message>:( Something was not right... We are trying to write to /secrets/something_secret</message>
		</else_condition>

		<quiz>
			<question>What is the file that was created?</question>
			<answer>{{post_command_output}}</answer>
			<correct_answer_response>:) flag{yay!}</correct_answer_response>
			<trigger_next_attack />
		</quiz>
	</attack>

	<!--trojanising a file in /usr/bin/, use hash comparisons to detect which file changes-->
	<!--trojanising a file in /usr/bin/, use package management to detect which file changes-->


</hackerbot>
